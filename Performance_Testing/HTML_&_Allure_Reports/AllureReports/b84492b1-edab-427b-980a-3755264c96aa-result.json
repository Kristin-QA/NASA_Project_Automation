{"name": "test_icons_clickable", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: unexpected command response\n  (Session info: chrome=103.0.5060.134)\nStacktrace:\n0   chromedriver                        0x00000001013fbd19 chromedriver + 5197081\n1   chromedriver                        0x0000000101389b23 chromedriver + 4729635\n2   chromedriver                        0x0000000100f672b8 chromedriver + 393912\n3   chromedriver                        0x0000000100f531e8 chromedriver + 311784\n4   chromedriver                        0x0000000100f528e7 chromedriver + 309479\n5   chromedriver                        0x0000000100f51e57 chromedriver + 306775\n6   chromedriver                        0x0000000100f51613 chromedriver + 304659\n7   chromedriver                        0x0000000100f6dfaa chromedriver + 421802\n8   chromedriver                        0x0000000100fcc6ad chromedriver + 808621\n9   chromedriver                        0x0000000100fb96f3 chromedriver + 730867\n10  chromedriver                        0x0000000100f8fa49 chromedriver + 559689\n11  chromedriver                        0x0000000100f90a75 chromedriver + 563829\n12  chromedriver                        0x00000001013cdbdd chromedriver + 5008349\n13  chromedriver                        0x00000001013d2b64 chromedriver + 5028708\n14  chromedriver                        0x00000001013d7bcf chromedriver + 5049295\n15  chromedriver                        0x00000001013d37ca chromedriver + 5031882\n16  chromedriver                        0x00000001013ad59f chromedriver + 4875679\n17  chromedriver                        0x00000001013ed388 chromedriver + 5137288\n18  chromedriver                        0x00000001013ed50f chromedriver + 5137679\n19  chromedriver                        0x0000000101403085 chromedriver + 5226629\n20  libsystem_pthread.dylib             0x00007fff204f38fc _pthread_start + 224\n21  libsystem_pthread.dylib             0x00007fff204ef443 thread_start + 15", "trace": "self = <Allure_Report.GoogleChrome testMethod=test_icons_clickable>\n\n    def test_icons_clickable(self):\n        driver1 = self.driver\n        driver1.get(HP.url)\n    \n        # random delay function:\n        def delay():\n            time.sleep(random.randint(1, 5))\n            delay()\n    \n        # check if URL is correct, (helper):\n        Nasa_Expected_URL = HP.url\n        current_url = driver1.current_url\n        if current_url == Nasa_Expected_URL:\n            print(\"Current URL is OK:\", driver1.current_url)\n        else:\n            print(\"Current URL is different than expected:\", driver1.current_url)\n    \n        # check if title is correct, (helper):\n        Nasa_Expected_Title = \"NASA\"\n        current_title = driver1.title\n        if current_title == Nasa_Expected_Title:\n            print(\"Current Title is OK:\", driver1.title)\n        else:\n            print(\"Current Title is different than expected:\", driver1.title)\n    \n        # Find elements by XPATH and click on it:\n        driver1.find_element(By.XPATH, \"//span[contains(.,'Follow NASA')]\").click()\n>       driver1.find_element(By.XPATH, \"//a[@href='/socialmedia'][contains(.,'Social Media')]\").click()\n\nAllure_Report.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:89: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:773: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b4507f0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: unexpected command response\\\\n  ...fff204f38fc _pthread_start + 224\\\\n21  libsystem_pthread.dylib             0x00007fff204ef443 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: unexpected command response\nE         (Session info: chrome=103.0.5060.134)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001013fbd19 chromedriver + 5197081\nE       1   chromedriver                        0x0000000101389b23 chromedriver + 4729635\nE       2   chromedriver                        0x0000000100f672b8 chromedriver + 393912\nE       3   chromedriver                        0x0000000100f531e8 chromedriver + 311784\nE       4   chromedriver                        0x0000000100f528e7 chromedriver + 309479\nE       5   chromedriver                        0x0000000100f51e57 chromedriver + 306775\nE       6   chromedriver                        0x0000000100f51613 chromedriver + 304659\nE       7   chromedriver                        0x0000000100f6dfaa chromedriver + 421802\nE       8   chromedriver                        0x0000000100fcc6ad chromedriver + 808621\nE       9   chromedriver                        0x0000000100fb96f3 chromedriver + 730867\nE       10  chromedriver                        0x0000000100f8fa49 chromedriver + 559689\nE       11  chromedriver                        0x0000000100f90a75 chromedriver + 563829\nE       12  chromedriver                        0x00000001013cdbdd chromedriver + 5008349\nE       13  chromedriver                        0x00000001013d2b64 chromedriver + 5028708\nE       14  chromedriver                        0x00000001013d7bcf chromedriver + 5049295\nE       15  chromedriver                        0x00000001013d37ca chromedriver + 5031882\nE       16  chromedriver                        0x00000001013ad59f chromedriver + 4875679\nE       17  chromedriver                        0x00000001013ed388 chromedriver + 5137288\nE       18  chromedriver                        0x00000001013ed50f chromedriver + 5137679\nE       19  chromedriver                        0x0000000101403085 chromedriver + 5226629\nE       20  libsystem_pthread.dylib             0x00007fff204f38fc _pthread_start + 224\nE       21  libsystem_pthread.dylib             0x00007fff204ef443 thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException"}, "attachments": [{"name": "stdout", "source": "c76a988d-1a41-453e-aa1c-da646c0381f3-attachment.txt", "type": "text/plain"}], "start": 1658971067265, "stop": 1658971072826, "uuid": "b94251b2-c249-4042-9112-29ae584ef7f7", "historyId": "e61677bb180695e13cae3a819ef4b869", "testCaseId": "023a6aa02e7720172402788f4525c397", "fullName": "Allure_Report.GoogleChrome#test_icons_clickable", "labels": [{"name": "suite", "value": "Allure_Report"}, {"name": "subSuite", "value": "GoogleChrome"}, {"name": "host", "value": "Kristinas-Air"}, {"name": "thread", "value": "6243-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Allure_Report"}]}