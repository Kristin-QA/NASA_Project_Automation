{
	"info": {
		"_postman_id": "f57811fe-57bd-4e4f-8abc-c22de345fdf4",
		"name": "CA Marketing (FULL Automatated/w Facker) + Monitor",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19022718"
	},
	"item": [
		{
			"name": "Create New  addresses",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//pm.environment.unset(\"ID\"); //will clear ID in ENV",
							"",
							"pm.environment.clear();",
							"// pm.environment.unset(\"ID\");",
							"// pm.environment.unset(\"company\");",
							"// pm.environment.unset(\"zipCode\");",
							"// pm.environment.unset(\"addressLine1\");",
							"// pm.environment.unset(\"addressLine2\");",
							"// pm.environment.unset(\"firstName\");",
							"// pm.environment.unset(\"lastName\");",
							"// pm.environment.unset(\"city\");",
							"// pm.environment.unset(\"country\");",
							"// pm.environment.unset(\"phoneNumber\");",
							"// pm.environment.unset(\"subdivision\");",
							"",
							"//returns a random integer from 10000 to 90000 with 5 digits",
							"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000);",
							"",
							"//returns a random integer from 100 to 900 with 3 digits",
							"pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100);",
							"",
							"const stateAbbreviations = [",
							" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',",
							" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',",
							" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',",
							" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',",
							" 'VT','VI','VA','WA','WV','WI','WY'",
							"];",
							"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];",
							"pm.environment.set(\"subdivision\", randomState);",
							"",
							"//Faker",
							"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/",
							"let fName = pm.variables.replaceIn('{{$randomFirstName}}')",
							"pm.environment.set(\"firstName\", fName);",
							"let lName = pm.variables.replaceIn('{{$randomLastName}}')",
							"pm.environment.set(\"lastName\", lName);",
							"let co = pm.variables.replaceIn('{{$randomCompanyName}}')",
							"pm.environment.set(\"company\", co);",
							"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')",
							"pm.environment.set(\"addressLine1\", addrLn1);",
							"let cty = pm.variables.replaceIn('{{$randomCity}}')",
							"pm.environment.set(\"city\", cty);",
							"let cntry = pm.variables.replaceIn('{{$randomCountry}}')",
							"pm.environment.set(\"country\", cntry);",
							"let phoneNum = pm.variables.replaceIn('{{$randomPhoneNumber}}')",
							"pm.environment.set(\"phoneNumber\", phoneNum);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"}); //Status",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"}); //Time",
							"",
							"pm.test(\"Response size is less than 2000b\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"}); //Size",
							"",
							"//Important! set ENV var ID after 1st POST:",
							"const jsonData = pm.response.json();",
							"pm.environment.set(\"ID\", jsonData.id); // Will take id from Response Body and put it to ENV \"ID\" value throug .set()",
							"",
							"",
							"//For what is this test?",
							"//var jsonData = JSON.parse(responseBody);",
							"//postman.setEnvironmentVariable(\"ID\", jsonData.id);",
							"",
							"",
							"pm.test(\"Body contains string ID\",()  => {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"}); // Partial checking id ",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get (\"ID\"));",
							"}); //Full checking id ",
							"",
							"",
							"//Code and Time cchecking  Tests with DRY code",
							"//test['Response Code is 200 OK same test for 200 code'] = responseCode.code === 200;",
							"//test['Response Time is Acceptable same test for Time'] = responseTime < 1000;",
							"//test['Response Size is Acceptable same test for Size'] = responseSize < 2000;",
							"",
							"",
							"pm.test(\"Response Assertions\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"45\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"}); //Header",
							"",
							"pm.test(\"Response should be ok to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody (\"Error\");",
							"});",
							"",
							" ",
							"",
							" if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"the instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "xO2iJzkCNg5c3rqHVspKUX-6e91Jg4yXZ7NYFcuH7So.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA3LTE3VDE5OjMwOjI0LjAzMFoiLCJ1aWQiOiJjNzNhZDNmNC01NjM2LTRkZjYtODRmZi05ZGUzZDViNmJhYmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImEwYTQ1NzlmLTM2ODQtNGEyYS05OWE3LWI5YTVhYzQ0MDljMCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNy0xN1QyMzozMDoyNC4wMzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "xO2iJzkCNg5c3rqHVspKUX-6e91Jg4yXZ7NYFcuH7So.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA3LTE3VDE5OjMwOjI0LjAzMFoiLCJ1aWQiOiJjNzNhZDNmNC01NjM2LTRkZjYtODRmZi05ZGUzZDViNmJhYmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImEwYTQ1NzlmLTM2ODQtNGEyYS05OWE3LWI5YTVhYzQ0MDljMCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNy0xN1QyMzozMDoyNC4wMzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"fullName\": {\n            \"firstName\": \"{{firstName}}\",\n            \"lastName\": \"{{lastName}}\"\n        },\n        \"company\": \"{{company}}\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"{{city}}\",\n        \"country\": \"{{company}}\",\n        \"subdivision\": \"{{subdivision}}\",\n        \"zipCode\": \"{{zipCode}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"location\": null\n    },\n    \"setAsDefault\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get  postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"pm.test(\"Response size is less than 7000b\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(7000);",
							"",
							"});",
							"",
							"pm.test(\"Body contains string ID\",()  => {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"}); // Partial checking id ",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get (\"ID\"));",
							"}); //Full checking id ",
							" ",
							"",
							" pm.test(\"Response should be ok to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody (\"Error\");",
							"});",
							"",
							"// Chai collection .a",
							"pm.test(\"Response Body should be in the correct format \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.country).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.subdivision).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.city).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.zipCode).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.company).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.addressLine1).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.addressLine2).to.be.a(\"string\");",
							"    ",
							"",
							"});",
							"",
							"pm.test(\"Responce Header is present correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    ",
							"});",
							"",
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"the instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "xO2iJzkCNg5c3rqHVspKUX-6e91Jg4yXZ7NYFcuH7So.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA3LTE3VDE5OjMwOjI0LjAzMFoiLCJ1aWQiOiJjNzNhZDNmNC01NjM2LTRkZjYtODRmZi05ZGUzZDViNmJhYmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImEwYTQ1NzlmLTM2ODQtNGEyYS05OWE3LWI5YTVhYzQ0MDljMCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNy0xN1QyMzozMDoyNC4wMzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "0fUoDM0Tv--zMHloAzPj9r16qWI2FB07A0kmQar0twI.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTAxLTA5VDAwOjMwOjI3LjYwM1oiLCJ1aWQiOiIxNWY0Y2ViNi0xMGJkLTRiZDYtOWZkMy0wMjkwYmUyYmYxM2IiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjNjNmY4OWI1LTcxOWUtNDA4Ny05OTA1LTc5YTJkMmNjNWI1ZSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wMS0wOVQwNDozMDoyNy42MDNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "default"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update adress",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//pm.environment.unset(\"ID\"); //will clear ID in ENV",
							"",
							"//pm.environment.clear();",
							"// pm.environment.unset(\"ID\");",
							"pm.environment.unset(\"company\");",
							"pm.environment.unset(\"zipCode\");",
							"pm.environment.unset(\"addressLine1\");",
							"pm.environment.unset(\"addressLine2\");",
							"pm.environment.unset(\"firstName\");",
							"pm.environment.unset(\"lastName\");",
							"pm.environment.unset(\"city\");",
							"pm.environment.unset(\"country\");",
							"pm.environment.unset(\"phoneNumber\");",
							"pm.environment.unset(\"subdivision\");",
							"",
							"//returns a random integer from 10000 to 90000 with 5 digits",
							"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000);",
							"",
							"//returns a random integer from 100 to 900 with 3 digits",
							"pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100);",
							"",
							"const stateAbbreviations = [",
							" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',",
							" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',",
							" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',",
							" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',",
							" 'VT','VI','VA','WA','WV','WI','WY'",
							"];",
							"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];",
							"pm.environment.set(\"subdivision\", randomState);",
							"",
							"//Faker",
							"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/",
							"let fName = pm.variables.replaceIn('{{$randomFirstName}}')",
							"pm.environment.set(\"firstName\", fName);",
							"let lName = pm.variables.replaceIn('{{$randomLastName}}')",
							"pm.environment.set(\"lastName\", lName);",
							"let co = pm.variables.replaceIn('{{$randomCompanyName}}')",
							"pm.environment.set(\"company\", co);",
							"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')",
							"pm.environment.set(\"addressLine1\", addrLn1);",
							"let cty = pm.variables.replaceIn('{{$randomCity}}')",
							"pm.environment.set(\"city\", cty);",
							"let cntry = pm.variables.replaceIn('{{$randomCountry}}')",
							"pm.environment.set(\"country\", cntry);",
							"let phoneNum = pm.variables.replaceIn('{{$randomPhoneNumber}}')",
							"pm.environment.set(\"phoneNumber\", phoneNum);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response size is less than 2000b\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Body has brackets\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"",
							"});",
							"pm.test(\"Response should be ok to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody (\"Error\");",
							"});",
							"",
							"",
							"",
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"the instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "xO2iJzkCNg5c3rqHVspKUX-6e91Jg4yXZ7NYFcuH7So.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA3LTE3VDE5OjMwOjI0LjAzMFoiLCJ1aWQiOiJjNzNhZDNmNC01NjM2LTRkZjYtODRmZi05ZGUzZDViNmJhYmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImEwYTQ1NzlmLTM2ODQtNGEyYS05OWE3LWI5YTVhYzQ0MDljMCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNy0xN1QyMzozMDoyNC4wMzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "0fUoDM0Tv--zMHloAzPj9r16qWI2FB07A0kmQar0twI.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTAxLTA5VDAwOjMwOjI3LjYwM1oiLCJ1aWQiOiIxNWY0Y2ViNi0xMGJkLTRiZDYtOWZkMy0wMjkwYmUyYmYxM2IiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjNjNmY4OWI1LTcxOWUtNDA4Ny05OTA1LTc5YTJkMmNjNWI1ZSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wMS0wOVQwNDozMDoyNy42MDNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"id\": \"{{ID}}\",\n        \"fullName\": {\n            \"firstName\": \"{{firstName}}\",\n            \"lastName\": \"{{lastName}}\"\n        },\n        \"company\": \"{{company}}\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"{{city}}\",\n        \"country\": \"{{country}}\",\n        \"subdivision\": \"{{subdivision}}\",\n        \"zipCode\": \"{{zipCode}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"location\": null\n    },\n    \"setAsDefault\": false,\n    \"fieldMask\": {\n        \"paths\": [\n            \"fullName.firstName\",\n            \"fullName.lastName\",\n            \"company\",\n            \"addressLine1\",\n            \"addressLine2\",\n            \"city\",\n            \"country\",\n            \"subdivision\",\n            \"zipCode\",\n            \"phoneNumber\",\n            \"setAsDefault\"\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Updated  adress",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response size is less than 2000b\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Body has all Keys \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"address\");",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"    pm.expect(pm.response.text()).to.include(\"fullName\");",
							"    pm.expect(pm.response.text()).to.include(\"lastName\");",
							"    pm.expect(pm.response.text()).to.include(\"country\");",
							"    pm.expect(pm.response.text()).to.include(\"subdivision\");",
							"    pm.expect(pm.response.text()).to.include(\"city\");",
							"    pm.expect(pm.response.text()).to.include(\"zipCode\");",
							"    pm.expect(pm.response.text()).to.include(\"phoneNumber\");",
							"    pm.expect(pm.response.text()).to.include(\"company\");",
							"    pm.expect(pm.response.text()).to.include(\"addressLine1\");",
							"    pm.expect(pm.response.text()).to.include(\"addressLine2\");",
							"    pm.expect(pm.response.text()).to.include(\"isDefaultAddress\");",
							"",
							"});",
							"",
							"// Chai collection .a",
							"pm.test(\"Response Body should be in the correct format \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.country).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.subdivision).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.city).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.zipCode).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.company).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.addressLine1).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.addressLine2).to.be.a(\"string\");",
							"    ",
							"",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response should be ok to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody (\"Error\");",
							"});",
							"",
							"pm.test(\"Entire response is correct\", function () {",
							"    const  jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"firstName\"));",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"lastName\"));",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"country\"));",
							"",
							"});",
							"",
							"",
							"pm.test(\"Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    ",
							"});",
							"",
							"",
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"the instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "xO2iJzkCNg5c3rqHVspKUX-6e91Jg4yXZ7NYFcuH7So.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA3LTE3VDE5OjMwOjI0LjAzMFoiLCJ1aWQiOiJjNzNhZDNmNC01NjM2LTRkZjYtODRmZi05ZGUzZDViNmJhYmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImEwYTQ1NzlmLTM2ODQtNGEyYS05OWE3LWI5YTVhYzQ0MDljMCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNy0xN1QyMzozMDoyNC4wMzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "0fUoDM0Tv--zMHloAzPj9r16qWI2FB07A0kmQar0twI.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTAxLTA5VDAwOjMwOjI3LjYwM1oiLCJ1aWQiOiIxNWY0Y2ViNi0xMGJkLTRiZDYtOWZkMy0wMjkwYmUyYmYxM2IiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjNjNmY4OWI1LTcxOWUtNDA4Ny05OTA1LTc5YTJkMmNjNWI1ZSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wMS0wOVQwNDozMDoyNy42MDNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "default"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deletel postal adress",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response size is less than 2000b\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    ",
							"});",
							"",
							"",
							"pm.test(\"Body has brackets\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});",
							"",
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Bad Request\"] = false;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"the instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "xO2iJzkCNg5c3rqHVspKUX-6e91Jg4yXZ7NYFcuH7So.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA3LTE3VDE5OjMwOjI0LjAzMFoiLCJ1aWQiOiJjNzNhZDNmNC01NjM2LTRkZjYtODRmZi05ZGUzZDViNmJhYmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImEwYTQ1NzlmLTM2ODQtNGEyYS05OWE3LWI5YTVhYzQ0MDljMCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNy0xN1QyMzozMDoyNC4wMzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "0fUoDM0Tv--zMHloAzPj9r16qWI2FB07A0kmQar0twI.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTAxLTA5VDAwOjMwOjI3LjYwM1oiLCJ1aWQiOiIxNWY0Y2ViNi0xMGJkLTRiZDYtOWZkMy0wMjkwYmUyYmYxM2IiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjNjNmY4OWI1LTcxOWUtNDA4Ny05OTA1LTc5YTJkMmNjNWI1ZSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wMS0wOVQwNDozMDoyNy42MDNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "default"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify  address was deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response size is less than 2000b\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Body has all Keys \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"message\");",
							"    pm.expect(pm.response.text()).to.include(\"details\");",
							"    pm.expect(pm.response.text()).to.include(\"cant_find\");",
							"    ",
							"});",
							"",
							"// Test gives Error: Can't find deleted ID | TypeError: \"address_id:\" is not a function",
							"//pm.test(\"Can't find deleted ID\", function () {",
							"    //var jsonData = pm.response.json();",
							"    //pm.expect(jsonData.message.cant_find).to.eql(\"address_id:\"(\"ID\"));",
							"//});",
							"",
							"",
							"pm.test(\"Header is present correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"191\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    ",
							"});",
							"",
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"}else if (responseCode.code === 400) {",
							"    tests[\"Bad Request, check request value\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"the instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "xO2iJzkCNg5c3rqHVspKUX-6e91Jg4yXZ7NYFcuH7So.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA3LTE3VDE5OjMwOjI0LjAzMFoiLCJ1aWQiOiJjNzNhZDNmNC01NjM2LTRkZjYtODRmZi05ZGUzZDViNmJhYmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImEwYTQ1NzlmLTM2ODQtNGEyYS05OWE3LWI5YTVhYzQ0MDljMCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNy0xN1QyMzozMDoyNC4wMzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "0fUoDM0Tv--zMHloAzPj9r16qWI2FB07A0kmQar0twI.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTAxLTA5VDAwOjMwOjI3LjYwM1oiLCJ1aWQiOiIxNWY0Y2ViNi0xMGJkLTRiZDYtOWZkMy0wMjkwYmUyYmYxM2IiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjNjNmY4OWI1LTcxOWUtNDA4Ny05OTA1LTc5YTJkMmNjNWI1ZSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wMS0wOVQwNDozMDoyNy42MDNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "default"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "value",
				"value": "G8GyugF-tKmH5BrYOk4aYMiMG8pwbfbQS8tObOEYMFo.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA3LTEyVDAwOjMzOjQwLjkyM1oiLCJ1aWQiOiJjNzNhZDNmNC01NjM2LTRkZjYtODRmZi05ZGUzZDViNmJhYmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImEwYTQ1NzlmLTM2ODQtNGEyYS05OWE3LWI5YTVhYzQ0MDljMCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNy0xMlQwNDozMzo0MC45MjNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}