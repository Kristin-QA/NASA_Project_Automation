{
	"info": {
		"_postman_id": "368f99d1-a87c-4bd6-91b9-209190e615c7",
		"name": "NASA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19022718"
	},
	"item": [
		{
			"name": "TLE API: Endpoint 1 Accessibility (http://tle.ivanstanojevic.me/api/tle?search={q})",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"pm.test(\"Response size is less than 20000kb\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(20000);",
							"});",
							"pm.test(\"Body has all keys\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"@context\");",
							"    pm.expect(pm.response.text()).to.include(\"@id\");",
							"    pm.expect(pm.response.text()).to.include(\"@type\");",
							"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
							"    pm.expect(pm.response.text()).to.include(\"member\");",
							"    pm.expect(pm.response.text()).to.include(\"parameters\");",
							"    pm.expect(pm.response.text()).to.include(\"search\");",
							"    pm.expect(pm.response.text()).to.include(\"sort\");",
							"    pm.expect(pm.response.text()).to.include(\"sort-dir\");",
							"    pm.expect(pm.response.text()).to.include(\"page\");",
							"    pm.expect(pm.response.text()).to.include(\"page-size\");",
							"",
							"});",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Server\", \"Apache\");",
							"    pm.response.to.have.header(\"Cache-Control\", \"no-cache, private\");",
							"    pm.response.to.have.header(\"Vary\", \"User-Agent\");",
							"     pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");",
							"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=5, max=499\");",
							"    pm.response.to.have.header(\"Connection\", \"Keep-Alive\");",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"",
							"    ",
							"});",
							"",
							"     pm.test(\"Response should be ok to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody (\"Error\");",
							"});",
							"",
							"    ",
							"",
							"",
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"the instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"    ",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://tle.ivanstanojevic.me/api/tle?search={q}",
					"protocol": "http",
					"host": [
						"tle",
						"ivanstanojevic",
						"me"
					],
					"path": [
						"api",
						"tle"
					],
					"query": [
						{
							"key": "search",
							"value": "{q}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TLE API: Endpoint 2 Accessibility (http://tle.ivanstanojevic.me)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"pm.test(\"Response size is less than 3000kb\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(3000);",
							"});",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Server\", \"Apache\");",
							"    pm.response.to.have.header(\"Cache-Control\", \"no-cache, private\");",
							"    pm.response.to.have.header(\"Cache-Control\", \"no-cache, private\");",
							"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding,User-Agent\");",
							"    //pm.response.to.have.header(\"Upgrade\", \"h2,h2c\");",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");",
							"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=5, max=500\");",
							"    pm.response.to.have.header(\"Content-Length\", \"1434\");",
							"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=UTF-8\");",
							"",
							"    ",
							"});",
							"",
							"    ",
							"   pm.test(\"Response should be ok to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody (\"Error\");",
							"});",
							"",
							"    ",
							"",
							"",
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"the instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"    ",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://tle.ivanstanojevic.me",
					"protocol": "http",
					"host": [
						"tle",
						"ivanstanojevic",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Asteroids - NeoWs: Browse the overall Asteroid data-set",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 4000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(4000);",
							"});",
							"pm.test(\"Response size is less than 500000kb\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(500000);",
							"});",
							"",
							"   pm.test(\"Response should be ok to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody (\"Error\");",
							"});",
							"",
							"    ",
							"",
							"",
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"the instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"    ",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=Yk7bUB7UqjVYtX1OGp10XI13uEx0lttWBVAgMvOS",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"neo",
						"rest",
						"v1",
						"neo",
						"browse"
					],
					"query": [
						{
							"key": "api_key",
							"value": "Yk7bUB7UqjVYtX1OGp10XI13uEx0lttWBVAgMvOS"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Asteroids - NeoWs:  Response  Status Code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"pm.test(\"Response size is less than 5000kb\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(5000);",
							"});",
							"",
							"   pm.test(\"Response should be ok to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody (\"Error\");",
							"});",
							"",
							"    ",
							"",
							"",
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"the instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"    ",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Yk7bUB7UqjVYtX1OGp10XI13uEx0lttWBVAgMvOS",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.nasa.gov/?=#:~:text=https%3A//api.nasa.gov/neo/rest/v1/feed%3Fstart_date%3D2015%2D09%2D07%26end_date%3D2015%2D09%2D08%26api_key%3DYk7bUB7UqjVYtX1OGp10XI13uEx0lttWBVAgMvOS",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "",
							"value": ""
						}
					],
					"hash": ":~:text=https%3A//api.nasa.gov/neo/rest/v1/feed%3Fstart_date%3D2015%2D09%2D07%26end_date%3D2015%2D09%2D08%26api_key%3DYk7bUB7UqjVYtX1OGp10XI13uEx0lttWBVAgMvOS"
				}
			},
			"response": []
		},
		{
			"name": "TLE API:  Response Size",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"pm.test(\"Response size is less than 3000kb\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(3000);",
							"});",
							"",
							"   pm.test(\"Response should be ok to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody (\"Error\");",
							"});",
							"",
							"    ",
							"",
							"",
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"the instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"    ",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://tle.ivanstanojevic.me",
					"protocol": "http",
					"host": [
						"tle",
						"ivanstanojevic",
						"me"
					]
				}
			},
			"response": []
		}
	]
}